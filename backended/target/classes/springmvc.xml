<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    
    <!-- 配置spring注解扫描的包 -->
    <context:component-scan base-package="com.wwc"></context:component-scan>
     
    <!-- 开启注解驱动 -->
    <!--  
      会自动注册DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter 这两个bean,
      所以就没有机会再给DefaultAnnotationHandlerMapping注入interceptors属性，无法指定拦截器。 
      可以通过人工配置上面的两个Bean，不使用 <mvc:annotation-driven />，就可以 给interceptors属性 注入拦截器了 
     --> 
    <mvc:annotation-driven></mvc:annotation-driven>
     
     
    <!-- 静态资源访问，解决页面无法访问到js、img和css文件夹中的文件的问题 -->
    <mvc:resources location="/imgages/" mapping="/imgages/**"/>  
    <mvc:resources location="/js/" mapping="/js/**"/>   
    <mvc:resources location="/css/" mapping="/css/**"/>
     
    <!-- 
          视图解析器：InternalResourceViewResolver 
      UrlBasedViewResolver 的子类，通常用于查找 JSP（类 InternalResourceView）和  
      JSTL（类 JstlView，InternalResourceView 的子类）等视图 
    --> 
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>     
</beans> 